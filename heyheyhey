import openpyxl
from openpyxl.styles import PatternFill, Border, Side, Alignment
import json

def read_servers(file_path='servers.txt'):
    servers = {}
    cluster = None
    
    with open(file_path, 'r') as file:
        for line in file:
            line = line.strip()
            if line.startswith("Cluster:"):
                cluster = line.replace("Cluster:", "").strip()
                servers[cluster] = []
            elif line:
                servers[cluster].append(line)
    
    return servers

def read_credentials(file_path='credentials.txt'):
    with open(file_path, 'r') as file:
        creds = json.load(file)
    return creds['username'], creds['password']

def check_hp_ilo(server, username, password):
    # Simulated function to check HP iLO health
    return {"health": "OK", "issues": None}

def check_dell_idrac(server, username, password):
    # Simulated function to check Dell iDRAC health
    return {"health": "OK", "issues": None}

def generate_report(servers, username, password):
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Health Report"
    
    headers = ["Cluster", "Server", "Health Status", "Issues"]
    ws.append(headers)
    
    black_fill = PatternFill(start_color="000000", end_color="000000", fill_type="solid")
    thin_white_border = Border(
        top=Side(style='thin', color="FFFFFF"),
        bottom=Side(style='thin', color="FFFFFF")
    )
    
    all_data = []
    for cluster, server_list in servers.items():
        for server in server_list:
            if server.startswith("uname"):
                result = check_hp_ilo(server, username, password)
            elif server.startswith("bltwa"):
                result = check_dell_idrac(server, username, password)
            else:
                continue  # Ignore unknown servers
            
            all_data.append([cluster, server, result["health"], result["issues"]])
    
    all_data.sort(key=lambda x: x[0])  # Sort by Cluster
    
    prev_cluster = None
    for row in all_data:
        cluster, server, health, issues = row
        
        # Insert a separator row when a new cluster starts
        if prev_cluster and prev_cluster != cluster:
            ws.append([""] * len(headers))  # Add empty row
            last_row = ws.max_row
            ws.merge_cells(start_row=last_row, start_column=1, end_row=last_row, end_column=len(headers))
            merged_cell = ws.cell(row=last_row, column=1)
            merged_cell.fill = black_fill
            merged_cell.value = ""
            merged_cell.alignment = Alignment(horizontal="center", vertical="center")
            ws.row_dimensions[last_row].height = 20  # Make it stand out
            for col in range(1, len(headers) + 1):
                ws.cell(row=last_row, column=col).border = thin_white_border
        
        ws.append(row)
        prev_cluster = cluster
    
    wb.save("server_health_report.xlsx")
    print("Report generated: server_health_report.xlsx")

if __name__ == "__main__":
    servers = read_servers()
    username, password = read_credentials()
    generate_report(servers, username, password)
